def CalculShapley1(rf_pre, df_pre, features, rf_post, df_post,
                  sample_size_pre=100, sample_size_post=100,
                  exclusion_threshold=0.01):
    import shap
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

    # Pr√©paration des donn√©es
    df_pre = df_pre[features].dropna().copy()
    df_post = df_post[features].dropna().copy()
    
    sample_df_pre = df_pre.sample(min(sample_size_pre, len(df_pre)), random_state=42)
    sample_df_post = df_post.sample(min(sample_size_post, len(df_post)), random_state=42)

    # Explainers
    explainer_pre = shap.TreeExplainer(rf_pre, model_output="raw")
    explainer_post = shap.TreeExplainer(rf_post, model_output="raw")

    shap_values_pre = explainer_pre.shap_values(sample_df_pre)
    shap_values_post = explainer_post.shap_values(sample_df_post)

    # Importance absolue moyenne
    mean_abs_pre = np.mean(np.abs(shap_values_pre), axis=0)
    mean_abs_post = np.mean(np.abs(shap_values_post), axis=0)

    # Normalisation en %
    mean_abs_pre_pct = mean_abs_pre / mean_abs_pre.sum()
    mean_abs_post_pct = mean_abs_post / mean_abs_post.sum()

    # DataFrame r√©cap
    df_importance = pd.DataFrame({
        "Feature": features,
        "SHAP_PreCOVID": mean_abs_pre,
        "SHAP_PostCOVID": mean_abs_post,
        "PreCOVID_%": mean_abs_pre_pct,
        "PostCOVID_%": mean_abs_post_pct,
        "Delta": mean_abs_post - mean_abs_pre
    }).sort_values("PostCOVID_%", ascending=False).reset_index(drop=True)

    # D√©terminer les features candidates √† exclure
    to_exclude = df_importance.loc[
        (df_importance["PreCOVID_%"] < exclusion_threshold) &
        (df_importance["PostCOVID_%"] < exclusion_threshold),
        "Feature"
    ].tolist()

    # --- Impression des r√©sultats num√©riques ---
    print("\nüìå Importances SHAP (valeurs exactes) :")
    print(df_importance.round(4))

    if to_exclude:
        print("\nüóëÔ∏è Param√®tres candidats √† exclure (importance < {:.1%} en pr√© et post) :".format(exclusion_threshold))
        for f in to_exclude:
            print(f" - {f}")
    else:
        print("\n‚úÖ Aucune variable ne satisfait le crit√®re d‚Äôexclusion.")

    # Graphiques classiques SHAP
    print("\nüìä SHAP Summary - Pr√©-COVID")
    shap.summary_plot(shap_values_pre, sample_df_pre, feature_names=features, show=True)
    plt.show()

    print("üìä SHAP Summary - Post-COVID")
    shap.summary_plot(shap_values_post, sample_df_post, feature_names=features, show=True)
    plt.show()

    return df_importance, to_exclude
